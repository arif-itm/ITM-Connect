rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers (single definitions)
    function isSignedIn() {
      return request.auth != null;
    }

    // Admin check using either custom claims OR Firestore document:
    // Preferred: set custom claim { admin: true } on the user.
    // Fallback: allow if admins/{uid}.isAdmin == true (document-based role).
    // Verify caller is admin strictly via Firestore document:
    // admins/{callerUid}.isAdmin == true
    function isAdmin() {
      return isSignedIn() &&
             exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.isAdmin == true;
    }

    // Admins collection security (single authoritative block)
    // - Only admins can read the list
    // - Admins can create and update admin profile documents
    // - Client-side delete is blocked (prefer server-side cleanup)
    match /admins/{uid} {
      // Allow a signed-in user to read their own admin doc so isAdmin() can be evaluated.
      // Admins can read any admin doc.
      allow read: if (isSignedIn() && request.auth.uid == uid) || isAdmin();

      // Only admins can create or update admin docs.
      allow create: if isAdmin();
      allow update: if isAdmin();

      // Block client-side delete; prefer doing this server-side.
      allow delete: if false;
    }

    // Basic helper to check if a field changes
    function isChanging(field) {
      return !(field in resource.data) || resource.data[field] != request.resource.data[field];
    }

    // Allow-list of collections used in app:
    // - notices (readable by all users, writes only by admins)
    // - routines (readable by all, writes by admins)
    // - teachers (readable by all, writes by admins)
    // - feedback (public create; admins can read/delete)
    // - settings (readable by all, writes only by admins) -> holds 'contact' doc


    // Public read, admin write collections
    match /notices/{docId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    match /routines/{docId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    match /teachers/{docId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Settings (key-value configuration)
    // Everyone can read settings (so user contact page can load),
    // Only admins can create/update/delete.
    match /settings/{docId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Feedback rules:
    // - Public create-only (anonymous allowed) so users can submit feedback
    // - Admins can read and delete feedback (no public read/update/delete)
    match /feedback/{docId} {
      allow create: if request.time < timestamp.date(9999, 1, 1);
      allow read: if isAdmin();
      allow delete: if isAdmin();
      allow update: if false;
    }


    // Deny everything else by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
